import{_ as s,o as a,c as e,a as l}from"./app.cf7f0c08.js";const t="/assets/1.0527bb91.png",n="/assets/2.6501fa19.png",i="/assets/3.b5e73e42.png",r="/assets/4.4d4382e4.png",o="/assets/5.cfe993dc.png",c="/assets/6.7eb60fda.png",p="/assets/7.9e626c35.png",d="/assets/8.50437bca.png",u="/assets/9.effd4722.png",g="/assets/10.cbf85aee.png",x=JSON.parse('{"title":"三分钟学会参与开源，提交 pr","description":"","frontmatter":{},"headers":[{"level":2,"title":"pr 是什么","slug":"pr-是什么","link":"#pr-是什么","children":[]},{"level":2,"title":"项目克隆到本地","slug":"项目克隆到本地","link":"#项目克隆到本地","children":[]},{"level":2,"title":"改代码","slug":"改代码","link":"#改代码","children":[]},{"level":2,"title":"提交","slug":"提交","link":"#提交","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"pages/quickStart/pr/index.md"}'),h={name:"pages/quickStart/pr/index.md"},m=l('<h1 id="三分钟学会参与开源-提交-pr" tabindex="-1">三分钟学会参与开源，提交 pr <a class="header-anchor" href="#三分钟学会参与开源-提交-pr" aria-hidden="true">#</a></h1><h2 id="pr-是什么" tabindex="-1">pr 是什么 <a class="header-anchor" href="#pr-是什么" aria-hidden="true">#</a></h2><p><strong>假设：</strong></p><ul><li>你在 GitHub 上发现了一个开源项目。</li><li>觉得项目中有 bug,或者写的不够好。</li><li>你想出手帮帮他。</li><li>这个时候就会用到 pr (pull request)。</li><li>这里翻译为： 我改了你的代码，你快来看看把！</li></ul><h2 id="项目克隆到本地" tabindex="-1">项目克隆到本地 <a class="header-anchor" href="#项目克隆到本地" aria-hidden="true">#</a></h2><p>首先找到一个项目，点击右上角的 Fork 按钮，把项目复制一份到自己的 GitHub。<br><img src="'+t+'" alt="alt 属性文本"><br> Fork 完之后我们到自己的仓库列表，找到刚刚复制的仓库，并 clone 到自己本地。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里要注意，一定是 clone 自己复制的那一份哦，而不是原仓库，没有人会让你直接更改别人代码的。</p></div><p>在正式改代码之前我们还需要了解一下仓库的关系。<br> 我们现在拥有三份代码，称为三个仓库。</p><ul><li>原作者 GitHub 上的仓库称为 <code>upstream</code></li><li>Fork 复制到我们自己 GitHub 上的称为 <code>origin</code></li><li>从我们自己 GitHub 上 clone 到本地的称为 <code>local</code><img src="'+n+'" alt="alt 属性文本"></li></ul><p>在我们项目目录下执行 <code>git remote -v</code> 发现只有<code>origin</code>仓库。 <img src="'+i+'" alt="alt 属性文本"><br> 这里用 <code>git remote add upstream 原仓库地址</code> 来添加<code>upstream</code>仓库。<br> 再次 <code>git remote -v</code> 查看添加成功。 <img src="'+r+`" alt="alt 属性文本"><br> 至此，我们三个仓库就都关联上了。</p><h2 id="改代码" tabindex="-1">改代码 <a class="header-anchor" href="#改代码" aria-hidden="true">#</a></h2><p>改别人代码之前我们还需要做一件事情，那就是基于 <code>upstream</code> 仓库创建一个新的分支。<br> 为什么这里需要创建新的<code>分支</code>呢，为一个<code>分支</code>在同一时间只能提交一个 <code>pr</code> 所以一般建议新建一个分支来提交 <code>pr</code>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 获取到 upstream 仓库的 main 分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git fetch upstream main</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 切换到 upstream 仓库的 main 分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout upstream/main</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 基于 upstream 仓库的 main 分支新建一个 feat-1 分支并切换</span></span>
<span class="line"><span style="color:#A6ACCD;">git switch -c feat-1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>好了终于可以修改代码了<br> 我们打开项目里仅有的 <code>readme</code> 文件，发现这里至少有两处错误，该大写的没大写，也不懂的使用三单。 <img src="`+o+'" alt="alt 属性文本"><br> 经过我们一番修改后，看起来没有什么问题了。 <img src="'+c+`" alt="alt 属性文本"></p><h2 id="提交" tabindex="-1">提交 <a class="header-anchor" href="#提交" aria-hidden="true">#</a></h2><p>然后我们提交代码。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">git add .</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m &#39;fix:修复了一些语法错误&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 这里要指明提交的仓库和分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git push origin feat-1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>提交成功后，打开 GitHub 我们 Fork 的仓库发现已经有提示了，我们点击右侧绿色按钮。 <img src="`+p+'" alt="alt 属性文本"><br> 如果你没有看到提示，切换到我们刚刚提交的分支，点击这里进入。 <img src="'+d+'" alt="alt 属性文本"><br> 总之我们进入到这个页面，按照项目要求填写标题和描述，点击右下角 <code>Create pull request</code>，来创建 pr。 <img src="'+u+'" alt="alt 属性文本"><br> 提交后看到这个页面，就说明我们的 pr 已经提交成功了，等作者合并你的 pr 你就成为这个项目的 contributor 啦。 <img src="'+g+'" alt="alt 属性文本"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>Fork 到自己GitHub</li><li>clone 到本地</li><li>添加 upstream 仓库</li><li>更新代码到local</li><li>创建分支</li><li>写代码</li><li>提交代码到 origin</li><li>创建 pr</li><li>成为 contributor</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>同一个仓库第二次提 pr 从更新代码到 local 开始就可以啦</p></div><hr><blockquote><p>如果本文对你有帮助，可以去 Github 给我的博客点个 star 嘛<br><strong><a href="https://github.com/zuoFeng59556/my-blog" target="_blank" rel="noreferrer">https://github.com/zuoFeng59556/my-blog</a></strong></p></blockquote>',23),b=[m];function _(C,A,f,k,y,v){return a(),e("div",null,b)}const G=s(h,[["render",_]]);export{x as __pageData,G as default};
